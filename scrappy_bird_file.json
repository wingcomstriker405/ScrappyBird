{
  "header" :
  {
    "filename" : "s",
    "filetype" : "high"
  },
  "content" :
  [
    "modul screen",
    "",
    "tunnel_buffer = 10",
    "tunnel_distance = 15",
    "tunnel_width = 10",
    "screen = none",
    "screen_width = width()",
    "screen_height = height()",
    "tunnel_color = [0, 0.5, 0]",
    "background_color = [0, 0, 0]",
    "character_color = [0, 0, 0.75]",
    "gameover_color = [1.0, 0, 0]",
    "tunnels = []",
    "character_tick = true",
    "running = true",
    "cool_down = 0",
    "px = 5",
    "py = 30",
    "pw = 5",
    "ph = 7",
    "pv = 0.0",
    "pa = 0.2",
    "pj = -2",
    "pv_max = 2",
    "",
    "",
    "def main()",
    " ipt(600)",
    " screens = get_screens()",
    " if length(screens) > 0",
    "  screen = screens[1]",
    " else",
    "  return",
    " end",
    "",
    " while true",
    "  draw(screen, 'fill', 'rectangle', 0, 0, screen_width, screen_height, background_color)",
    "  draw(screen, 'draw', 'rectangle', 1, 1, screen_width - 1, screen_height - 1, tunnel_color)",
    "  py = 30",
    "",
    "  waiting = true",
    "  while waiting",
    "   result = in('eeeeee', 1)",
    "   if result[1]",
    "    waiting = false",
    "   end",
    "  end",
    "",
    "  tunnels = []",
    "  generate_tunnel(0)",
    "  generate_tunnel(floor(screen_width / 2))",
    "  running = true",
    "",
    "  while running",
    "   if character_tick",
    "    character_tick = false",
    "    move_player()",
    "   else",
    "    character_tick = true",
    "    for i = length(tunnels), i > 0, i -= 1",
    "     move_tunnel(tunnels[i])",
    "     if check_validity(tunnels[i]) == false",
    "      remove_element(tunnels, i)",
    "      generate_tunnel(0)",
    "     end",
    "    end",
    "   end",
    "   draw(screen, 'fill', 'rectangle', 0, 0, screen_width, screen_height, background_color)",
    "   draw(screen, 'fill', 'rectangle', px, floor(py), pw, ph, character_color)",
    "   draw_tunnel(tunnels[1])",
    "   draw_tunnel(tunnels[2])",
    "   if check_collision(tunnels[1])",
    "    running = false",
    "   end",
    "   sleep(0)",
    "  end",
    "  draw(screen, 'fill', 'rectangle', 0, 0, screen_width, screen_height, gameover_color)",
    "  sleep(40)",
    " end",
    "end",
    "",
    "def move_player()",
    " if cool_down == 0",
    "  result = in('eeeeee', 1)",
    "  if result[1]",
    "   pv = pj",
    "   cool_down = 3",
    "  end",
    " else",
    "  cool_down -= 1",
    " end",
    "",
    " py += pv",
    " pv += pa",
    " if pv > pv_max",
    "  pv = pv_max",
    " end",
    " if py > screen_height",
    "  running = false",
    " elseif py + ph < 0",
    "  running = false",
    " end",
    "end",
    "",
    "def check_collision(tunnel)",
    " if tunnel[1][1] < px && px < tunnel[1][1] + tunnel[1][3] && tunnel[1][2] < py && py < tunnel[1][2] + tunnel[1][4]",
    "  return true",
    " else if tunnel[1][1] < px + pw && px + w < tunnel[1][1] + tunnel[1][3] && tunnel[1][2] < py && py < tunnel[1][2] + tunnel[1][4]",
    "  return true",
    " elseif tunnel[1][1] < px && px < tunnel[1][1] + tunnel[1][3] && tunnel[1][2] < py + ph && py + ph < tunnel[1][2] + tunnel[1][4]",
    "  return true",
    " elseif tunnel[1][1] < px + pw && px + pw < tunnel[1][1] + tunnel[1][3] && tunnel[1][2] < py + ph && py + ph < tunnel[1][2] + tunnel[1][4]",
    "  return true",
    " end",
    "",
    " if tunnel[2][1] < px && px < tunnel[2][1] + tunnel[2][3] && tunnel[2][2] < py && py < tunnel[2][2] + tunnel[2][4]",
    "  return true",
    " else if tunnel[2][1] < px + pw && px + w < tunnel[2][1] + tunnel[2][3] && tunnel[2][2] < py && py < tunnel[2][2] + tunnel[2][4]",
    "  return true",
    " elseif tunnel[2][1] < px && px < tunnel[2][1] + tunnel[2][3] && tunnel[2][2] < py + ph && py + ph < tunnel[2][2] + tunnel[2][4]",
    "  return true",
    " elseif tunnel[2][1] < px + pw && px + pw < tunnel[2][1] + tunnel[2][3] && tunnel[2][2] < py + ph && py + ph < tunnel[2][2] + tunnel[2][4]",
    "  return true",
    " end",
    " return false",
    "end",
    "",
    "def generate_tunnel(offset)",
    " height = floor(random() * (screen_height - tunnel_buffer * 2 - tunnel_distance))",
    " tunnel = []",
    " tunnel[1] = []",
    " tunnel[1][1] = screen_width + offset",
    " tunnel[1][2] = screen_height - height - tunnel_buffer",
    " tunnel[1][3] = tunnel_width",
    " tunnel[1][4] = height + tunnel_buffer",
    "",
    " tunnel[2] = []",
    " tunnel[2][1] = screen_width + offset",
    " tunnel[2][2] = 0",
    " tunnel[2][3] = tunnel_width",
    " tunnel[2][4] = screen_height - tunnel_buffer * 2 - height - tunnel_distance",
    " tunnels <- tunnel",
    "end",
    "",
    "def move_tunnel(tunnel)",
    " tunnel[2][1] = tunnel[2][1] - 1",
    " tunnel[1][1] = tunnel[1][1] - 1",
    "end",
    "",
    "def check_validity(tunnel)",
    " return tunnel[1][1] + tunnel_width >= 0",
    "end",
    "",
    "def draw_tunnel(tunnel)",
    " draw(screen, 'fill', 'rectangle', tunnel[1][1], tunnel[1][2], tunnel[1][3], tunnel[1][4], tunnel_color)",
    " draw(screen, 'fill', 'rectangle', tunnel[2][1], tunnel[2][2], tunnel[2][3], tunnel[2][4], tunnel_color)",
    "end",
    "",
    "main()"
  ]
}